// Minimum days to make M bouquets...
import java.util.*;
public class bouqouets {
    public boolean possible(int []nums,int days,int k,int m){
        int n=nums.length;
        int cnt = 0;
        int noOfB = 0;
        for(int i=0;i<n;i++){
            if(nums[i]<= days){
                cnt ++;
            }
            else{
                noOfB += (cnt / k);
                cnt  = 0;
            }
        }
        noOfB += (cnt / n);
        return noOfB >=m;
    }
    public int roseGarden(int []nums,int k,int m){
        int n=nums.length;
        int maxi = Integer.MIN_VALUE;
        int mini = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            maxi = Math.max(maxi,nums[i]);
            mini = Math.min(mini,nums[i]);
        }
        int low = mini;
        int high = maxi;
        int ans = 0;
        while(low <= high){
            int mid = (low + high )/2;
            if(possible(nums, mid, k, m)){
                ans = low;
                high = mid  - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return low;
    }
    public static void main(String[] args) {
        int []arr = {12,33,43,15,5,36,66,78};
        //int days = 1;
        int k=4;
        int m=2;
        bouqouets obj = new bouqouets();
        int res = obj.roseGarden(arr, k, m);
        System.out.println(res);
    }
}


// Output - 79 
