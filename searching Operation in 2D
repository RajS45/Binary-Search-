// Search in 2D matrix ...

class Solution {
    private boolean binarySearch(int[] nums, int target) {
        int n = nums.length; 
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            
            if (nums[mid] == target) return true;
            else if (target > nums[mid]) low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        
        for (int i = 0; i < n; i++) {
            
            
            boolean flag = binarySearch(matrix[i], target);
            
            if (flag) return true;
        }
        return false; 
    }
        public static void main(String[] args) {
        int[][] matrix = {{1, 4, 7, 11, 15}, 
                          {2, 5, 8, 12, 19},
                          {3, 6, 9, 16, 22},
                          {10, 13, 14, 17, 24},
                          {18, 21, 23, 26, 30}};
        int target = 8;
        
        Solution sol = new Solution();
        
        boolean result = sol.searchMatrix(matrix, target);
        

        System.out.println(result ? "true" : "false");
    }
 }
}
